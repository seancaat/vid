{"remainingRequest":"/Users/catangui/Documents/GitHub/vid/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/catangui/Documents/GitHub/vid/src/views/Resources.vue?vue&type=template&id=f0542a4a&scoped=true&","dependencies":[{"path":"/Users/catangui/Documents/GitHub/vid/src/views/Resources.vue","mtime":1613617894696},{"path":"/Users/catangui/Documents/GitHub/vid/node_modules/cache-loader/dist/cjs.js","mtime":1607551081144},{"path":"/Users/catangui/Documents/GitHub/vid/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1607551087951},{"path":"/Users/catangui/Documents/GitHub/vid/node_modules/cache-loader/dist/cjs.js","mtime":1607551081144},{"path":"/Users/catangui/Documents/GitHub/vid/node_modules/vue-loader/lib/index.js","mtime":1607551087951}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}