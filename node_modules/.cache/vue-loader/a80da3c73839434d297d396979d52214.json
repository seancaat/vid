{"remainingRequest":"/Users/catangui/Documents/GitHub/er-resistance/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/catangui/Documents/GitHub/er-resistance/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/catangui/Documents/GitHub/er-resistance/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/catangui/Documents/GitHub/er-resistance/src/views/Resources.vue?vue&type=template&id=f0542a4a&scoped=true&","dependencies":[{"path":"/Users/catangui/Documents/GitHub/er-resistance/src/views/Resources.vue","mtime":1613617894696},{"path":"/Users/catangui/Documents/GitHub/er-resistance/node_modules/cache-loader/dist/cjs.js","mtime":1607551081144},{"path":"/Users/catangui/Documents/GitHub/er-resistance/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1607551087951},{"path":"/Users/catangui/Documents/GitHub/er-resistance/node_modules/cache-loader/dist/cjs.js","mtime":1607551081144},{"path":"/Users/catangui/Documents/GitHub/er-resistance/node_modules/vue-loader/lib/index.js","mtime":1607551087951}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICBfYygic2VjdGlvbiIsIFsKICAgICAgX2MoCiAgICAgICAgImFzaWRlIiwKICAgICAgICBbCiAgICAgICAgICBfYygicm91dGVyLWxpbmsiLCB7IHN0YXRpY0NsYXNzOiAiYnV0dG9uIiwgYXR0cnM6IHsgdG86ICJtZW51IiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJCYWNrIHRvIGVtb3Rpb24gcmVjb2duaXRpb24gc3lzdGVtIikKICAgICAgICAgIF0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKCJkaXYiKSwKICAgICAgX3ZtLl9tKDApCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJtYWluIiwgWwogICAgICBfYygiaDEiLCBbX3ZtLl92KCJBYm91dCB0aGlzIHByb2plY3QiKV0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBwcm9qZWN0IHdhcyBjcmVhdGVkIGJ5IGEgZ3JvdXAgb2Ygc29jaWFsIHNjaWVudGlzdHMsIGNpdGl6ZW4gc2NpZW50aXN0cywgYW5kIGRlc2lnbmVycy4gV2Ugd2FudCB0byBvcGVuIHVwIGNvbnZlcnNhdGlvbnMgYWJvdXQgZW1vdGlvbiByZWNvZ25pdGlvbiBzeXN0ZW1zOiBmcm9tIHRoZSBzY2llbmNlIGJlaGluZCB0aGUgdGVjaG5vbG9neSB0byB0aGVpciBzb2NpYWwgaW1wYWN0cy0tYW5kIGV2ZXJ5dGhpbmcgZWxzZSBpbiBiZXR3ZWVuLiBPdXIgYWltIGlzIHRvIHByb21vdGUgcHVibGljIHVuZGVyc3RhbmRpbmcgb2YgdGhlc2UgdGVjaG5vbG9naWVzIGFuZCBjaXRpemVuIGludm9sdmVtZW50IGluIHRoZWlyIGRldmVsb3BtZW50IGFuZCB1c2UuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiV2UgYXJlIGludGVyZXN0ZWQgaW4gZ2F0aGVyaW5nIGluZm9ybWF0aW9uIGFib3V0IHBlb3BsZeKAmXMgZXhwZXJpZW5jZXMgb2YgZW1vdGlvbiByZWNvZ25pdGlvbiBzeXN0ZW1zIGFuZCB5b3VyIHRob3VnaHRzIG9uIHRoZWlyIHByYWN0aWNhbCBhcHBsaWNhdGlvbnMgaW4gb3JkZXIgdG8gZnVydGhlciBwZW9wbGUtY2VudHJlZCBsZWFybmluZyBvbiB0aGUgdG9waWMuIFRoaXMgaXMgYSBwYXJ0aWNpcGF0b3J5IGtub3dsZWRnZS1idWlsZGluZyBleGVyY2lzZSAtLSB5b3VyIHBlcnNwZWN0aXZlIG1hdHRlcnMsIGFuZCB3ZSB3YW50IHRvIGhlYXIgeW91ciBleHBlcmllbmNlcywgcmVmbGVjdGlvbnMsIHJlYWN0aW9ucyBhbmQgY29uY2VybnMuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUGxlYXNlIGRvbuKAmXQgaGVzaXRhdGUgdG8gZ2V0IGluIHRvdWNoIGlmIHlvdSB3YW50IHRvIGRpc2N1c3MgdGhlc2UgdG9waWNzIHdpdGggdXMgaW4gbW9yZSBkZXRhaWwuIFlvdSBjYW4gY29udGFjdCB1cyBhdCAiCiAgICAgICAgKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIm1haWx0bzplbW9qaWZ5cHJvamVjdEBnbWFpbC5jb20iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJlbW9qaWZ5cHJvamVjdEBnbWFpbC5jb20iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiLiAiKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHlvdSB3YW50IHRvIGtlZXAgaW4gdG91Y2ggYWJvdXQgdGhlIHByb2plY3QsIGpvaW4gb3VyIG1haWxpbmcgbGlzdCAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2Zvcm1zL2QvZS8xRkFJcFFMU2Y0bTNvM1RlVkFqUTlRZ2JQMHd6bl9CRm16TlVlNGpTOW5wUVU0ckRNdFFrRmpOdy92aWV3Zm9ybT91c3A9c2ZfbGluayIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImhlcmUiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfYygiaDEiLCBbX3ZtLl92KCJUZWFtIildKSwKICAgICAgX2MoImg0IiwgWwogICAgICAgIF92bS5fdigiVmVkYSBTdXRlZGpvIFRheSwgU3RvcnkgQXJ0aXN0IGFuZCBDaGFyYWN0ZXIgQW5pbWF0b3IiKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJCYXNlZCBpbiBTaW5nYXBvcmUsIFZlZGEgaXMgYSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL3ZlZGFzdXRlZGpvLndpeHNpdGUuY29tL2FkZXZlZGEiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJmcmVlbGFuY2UgYW5pbWF0b3IiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgd2l0aCBzdHJvbmcgc3Rvcnl0ZWxsaW5nIGFiaWxpdGllcy4gU2hlIGdyYWR1YXRlZCBmcm9tIE5hbnlhbmcgVGVjaG5vbG9naWNhbCBVbml2ZXJzaXR5IGluIDIwMjAgd2l0aCBhIEJhY2hlbG9yJ3MgRGVncmVlIGluIENoYXJhY3RlciBBbmltYXRpb24gd2l0aCBIb25vdXJzIGFuZCBNaW5vciBpbiBDcmVhdGl2ZSBXcml0aW5nLiBPbiB0b3Agb2YgY3JlYXRpdmUgc3Rvcnl0ZWxsaW5nIGFuZCB3cml0aW5nLCBoZXIgc2tpbGxzIGluY2x1ZGUgaWxsdXN0cmF0aW9ucywgY2hhcmFjdGVyIGFuaW1hdGlvbiBhbmQgdmlkZW8gZWRpdGluZy4gU2hlIGlzIGN1cnJlbnRseSBhIFByb2R1Y2VyIGluIGEgbG9jYWwgYW5pbWF0aW9uIGNvbXBhbnksIGFuZCBpcyBhaW1pbmcgdG8gcHVyc3VlIGhlciBhbWJpdGlvbnMgb2YgYmVjb21pbmcgYSBOYXJyYXRpdmUgRGlyZWN0b3Igb3IgSGVhZCBvZiBTdG9yeSBpbiB0aGUgQW5pbWF0aW9uIEluZHVzdHJ5LiAiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImg0IiwgW192bS5fdigiTmV0aHJhIFNhbWFyYXdpY2tyZW1hLCBQaEQsIFZvaWNlb3ZlciIpXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJOZXRocmEgaXMgYW4gYW50aHJvcG9sb2dpc3QsIG1lZGlhdG9yLCBhbmQgd3JpdGVyLiBTaGUgaXMgdGhlIERpcmVjdG9yIG9mIEV0aG5vZ3JhcGh5IGFuZCBEZXNpZ24gYXQgRG92ZXRhaWwgTGFicyBhbmQgYSBsZWN0dXJlciBhdCBTdGFuZm9yZCBVbml2ZXJzaXR5J3MgSGFzc28gUGxhdHRuZXIgSW5zdGl0dXRlIG9mIERlc2lnbiAoZC5TY2hvb2wpLiBIZXIgd29yayBjb21iaW5lcyBldGhub2dyYXBoeSwgZGVzaWduIHRoaW5raW5nIGFuZCBlbXBhdGhldGljIGxpc3RlbmluZyB0byBzdXBwb3J0IGluZGl2aWR1YWxzIGFuZCBvcmdhbml6YXRpb25zIHRvIGJ1aWxkIGNvbGxhYm9yYXRpdmUgcmVsYXRpb25zaGlwcy4gU2hlIHRlYWNoZXMgZW1wYXRoZXRpYyBsaXN0ZW5pbmcgYXQgYSByYW5nZSBvZiB3b3JrcGxhY2VzLCBpbmNsdWRpbmcgdGhlIHRlY2ggc2VjdG9yLCBub24tcHJvZml0IGFuZCBhY3RpdmlzdCBvcmdhbml6YXRpb25zLiBTaGUgcHJvdmlkZXMgY29hY2hpbmcgYW5kIGNvbnN1bHRpbmcgdGhyb3VnaCAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgYXR0cnM6IHsgdGFyZ2V0OiAiX2JsYW5rIiwgaHJlZjogImh0dHBzOi8vd3d3Lmxpc3RlbnVwbGFiLmNvbS8iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIkxpc3RlbiBVcCIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgYSBsYWIgdGhhdCBicmluZ3MgZW1wYXRoeSBhbmQgY3JlYXRpdml0eSB0byB0cmFpbiBwZW9wbGUgdG8gaGF2ZSBkaWZmaWN1bHQgY29udmVyc2F0aW9ucyBieSBsaXN0ZW5pbmcgZm9yIHdoYXQgbWF0dGVycy4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIkpvaG4gTGVlLCBzY3JpcHR3cml0ZXIgIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkpvaG4gaXMgYW4gYXV0aG9yLCB1c2VyIGV4cGVyaWVuY2Ugd3JpdGVyLCBhbmQgdGVhY2hlci4gSGUgcmVjZWl2ZWQgaGlzIE1GQSBmcm9tIHRoZSBVbml2ZXJzaXR5IG9mIE1pY2hpZ2FuIGFuZCBzdWJzZXF1ZW50bHkgdGF1Z2h0IG5hcnJhdGl2ZSBkZXNpZ24sIHBvZGNhc3Qgc2NyaXB0aW5nLCBhbmQgdGhlIGFydCBvZiBvcmFsIHByZXNlbnRhdGlvbiBhdCBTdGFuZm9yZCBVbml2ZXJzaXR5LiBBcyBhIFVYIHN0b3J5dGVsbGVyLCBoZSBpcyBwYXJ0aWN1bGFybHkgaW50ZXJlc3RlZCBpbiBoZWxwaW5nIGJyb2FkZXIgYXVkaWVuY2VzIGVuZ2FnZSB3aXRoIGNvbXBsZXgsIHJlc2VhcmNoLWJhc2VkIGlkZWFzLiBIZSBoYXMgYWxzbyBiZWVuIGEgd3JpdGluZyBjb25zdWx0YW50IGF0IFNSSSBJbnRlcm5hdGlvbmFsIGFuZCB0aGUgU3RhbmZvcmQgU3Rvcnl0ZWxsaW5nIFByb2plY3QuIEhlIHJlY2VpdmVkIHRoZSBDYXJvbCBIb3VjayBTbWl0aCBGaWN0aW9uIEZlbGxvd3NoaXAgYXQgdGhlIFVuaXZlcnNpdHkgb2YgV2lzY29uc2luLCBhIEpvaG4gU3RlaW5iZWNrIGNyZWF0aXZlIHdyaXRpbmcgZmVsbG93c2hpcCBhdCBTYW4gSm9zZSBTdGF0ZSBVbml2ZXJzaXR5LCBhbmQgd3JpdGluZyByZXNpZGVuY3kgYXdhcmRzIGZyb20gWWFkZG8sIHRoZSBEamVyYXNzaSBSZXNpZGVudCBBcnRpc3RzIFByb2dyYW0sIGFuZCB0aGUgSGVhZGxhbmRzIENlbnRlciBmb3IgdGhlIEFydHMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIklnb3IgKEdhcnkpIFJ1Ymlub3YsIFBoRCwgUHJvamVjdCBEaXJlY3RvciIpXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiR2FyeSBpcyBjby1mb3VuZGVyIG9mICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBhdHRyczogeyB0YXJnZXQ6ICJfYmxhbmsiLCBocmVmOiAiaHR0cHM6Ly9kb3ZldGFpbGxhYnMuY29tLyIgfSB9LAogICAgICAgICAgW192bS5fdigiRG92ZXRhaWwgTGFicyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgYW5kIFNlbmlvciBQcm9qZWN0IE1hbmFnZXIgYXQgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cucHVibGljZXF1aXR5Z3JvdXAub3JnL2lydWJpbm92IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiUHVibGljIEVxdWl0eSBHcm91cCIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gSGUgaGFzIHB1Ymxpc2hlZCBvbiBkZXZlbG9wbWVudCwgZW52aXJvbm1lbnQgYW5kIG1pZ3JhdGlvbiwgYWx3YXlzIHRyYWluaW5nIGF0dGVudGlvbiBvbiB0aGUgaW5nZW51aXR5IGFuZCBwZXJzZXZlcmFuY2Ugb2YgcGVvcGxlIGZhY2luZyBhZHZlcnNpdHkuIEhlIGhvbGRzIGEgUGhEIGluIEFudGhyb3BvbG9neSBmcm9tIFByaW5jZXRvbiBVbml2ZXJzaXR5LCBhbiBNQSBpbiBJbnRlcm5hdGlvbmFsIERldmVsb3BtZW50ICYgU29jaWFsIENoYW5nZSBmcm9tIENsYXJrIFVuaXZlcnNpdHksIGFuZCBhIEJBIGluIEFudGhyb3BvbG9neSBmcm9tIENvcm5lbGwgVW5pdmVyc2l0eS4gIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIkFsZXhhIEhhZ2VydHksIFBoRCwgcHJvamVjdCBQSSIpXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBbGV4YSBpcyBhbiBhbnRocm9wb2xvZ2lzdCByZXNlYXJjaGluZyB0aGUgc29jaWV0YWwgaW1wYWN0cyBvZiB0ZWNobm9sb2d5IGF0IHRoZSBVbml2ZXJzaXR5IG9mIENhbWJyaWRnZSwgTGV2ZXJodWxtZSBDZW50cmUgZm9yIHRoZSBGdXR1cmUgb2YgSW50ZWxsaWdlbmNlIGFuZCBDZW50cmUgZm9yIHRoZSBTdHVkeSBvZiBFeGlzdGVudGlhbCBSaXNrLCBhbmQgY28tZm91bmRlciBvZiAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgYXR0cnM6IHsgdGFyZ2V0OiAiX2JsYW5rIiwgaHJlZjogImh0dHBzOi8vZG92ZXRhaWxsYWJzLmNvbS8iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIkRvdmV0YWlsIExhYnMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIFNoZSBob2xkcyBhIFBoRCBpbiBhbnRocm9wb2xvZ3kgZnJvbSBTdGFuZm9yZCBVbml2ZXJzaXR5IGFuZCBpcyBpbnRlcmVzdGVkIGluIGhvdyBwYXJ0aWNpcGF0b3J5LCBjb2xsYWJvcmF0aXZlLCBhcnRzLWJhc2VkIGFuZCBldGhub2dyYXBoaWMgbWV0aG9kcyBjYW4gYmUgdXNlZCB0byBtYWtlIHNvY2lldHkgYW5kIHRlY2hub2xvZ3kgbW9yZSBqdXN0IGFuZCBlcXVpdGFibGUuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiaDQiLCBbX3ZtLl92KCJKb2UgTWNDcmF3LCBUZWNobmljYWwgQ29uc3VsdGFudCIpXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJKb2UgaXMgYSBTb2Z0d2FyZSBEZXZlbG9wZXIgY3VycmVudGx5IHdvcmtpbmcgZm9yIE1vYmlsZSBQcm9ncmFtbWluZyBMTEMgb24gdGhlIENCUyBhcHBzIGZvciBpT1MvQXBwbGVUVi4gSGUgcHJvdmlkZXMgVGVjaG5pY2FsIENvbnN1bHRpbmcgZm9yIERvdmV0YWlsIExhYnMgb24gcHJvamVjdHMgcmVsYXRlZCB0byB0ZWNobm9sb2dpY2FsIGV0aGljcyBpbiBBSS9NTCB0ZWNobm9sb2dpZXMuIERldmVsb3BlZCBBSUJpYXMuY29tIHRvIGV4cGxvcmUgcHJvamVjdHMgcmVsYXRlZCB0byBiaWFzIGluIEFJLiBIZSBhbHNvIGZvdW5kZWQgU2hvd0JsZW5kZXIgTExDIGFuZCBjcmVhdGVkIHRoZSBBdWdtZW50ZWQgUmVhbGl0eSBXaWZpIERpYWdub3N0aWMgYXBwIGZvciBpT1MuIEpvZSBob2xkcyBhIEJBIGluIEN1bHR1cmFsIEFudGhyb3BvbG9neSBmcm9tIFVDIFNhbnRhIENydXouIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIkxpdmlhIEdhcm9mYWxvLCB2aXN1YWwgYW50aHJvcG9sb2d5IGNvbnN1bHRhbnQiKV0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTGl2aWEgaXMgYSBtZWRpY2FsIGFuZCBwc3ljaG9sb2dpY2FsIGFudGhyb3BvbG9naXN0IGN1cnJlbnRseSBjb21wbGV0aW5nIGhlciBkb2N0b3JhdGUgYXQgTm9ydGh3ZXN0ZXJuIFVuaXZlcnNpdHksIHdoZXJlIHNoZSBpcyBhbHNvIGVhcm5pbmcgYSBtYXN0ZXLigJlzIGluIHB1YmxpYyBoZWFsdGggZnJvbSB0aGUgRmVpbmJlcmcgU2Nob29sIG9mIE1lZGljaW5lLiBIZXIgcmVzZWFyY2ggZm9jdXNlcyBvbiB0cmF1bWEsIHB1YmxpYyBoZWFsdGggYW5kIEFJIGluIG1lZGljaW5lLiBTaGUgZHJhd3Mgb24gdmlzdWFsIGFudGhyb3BvbG9neSwgbXVsdGltb2RhbCBtZXRob2RzLCBhbmQgdmlzdWFsIGFydHMuIEhlciBkZXNpZ24gd29yayBjYW4gYmUgZm91bmQgYXQgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICJodHRwczovL3d3dy50dWdib2F0ZGVzaWducy5jb20iLCB0YXJnZXQ6ICJfYmxhbmsiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJUdWdib2F0IildCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImg0IiwgWwogICAgICAgIF92bS5fdigiQWxleGFuZHJhIEFsYmVydCwgUGhEIChjaXRpemVuIHNjaWVuY2UgbGVhZCk7IChHTVQpICIpCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQWxleCBpcyBhIHNvY2lhbCByZXNlYXJjaGVyIGJhc2VkIGluIHRoZSBFeHRyZW1lIENpdGl6ZW4gU2NpZW5jZSAoRXhDaXRlUykgcmVzZWFyY2ggZ3JvdXAgaW4gdGhlIEdlb2dyYXBoeSBEZXBhcnRtZW50IGF0IFVuaXZlcnNpdHkgQ29sbGVnZSBMb25kb24gKFVDTCkuIFNoZSBpcyBjdXJyZW50bHkgYSBwb3N0ZG9jdG9yYWwgcmVzZWFyY2hlciBvbiB0aGUgTWVkaWNhbCBSZXNlYXJjaCBDb3VuY2lsLWZ1bmRlZCBBY3RFYXJseSBVSyBQcmV2ZW50YXRpdmUgUmVzZWFyY2ggUGFydG5lcnNoaXAsIGV4YW1pbmluZyBjaXRpemVuIHNjaWVuY2UgYW5kIGNvLXByb2R1Y3Rpb24gaW4gaGVhbHRoLiBTaGUgaGFzIGEgUGhEIGZyb20gVW5pdmVyc2l0eSBvZiBNYW5jaGVzdGVyIGluIGNpdGl6ZW4gc29jaWFsIHNjaWVuY2UuIEhlciByZXNlYXJjaCBpbnRlcmVzdHMgaW5jbHVkZSBjaXRpemVuIHNjaWVuY2UsIHBhcnRpY2lwYXRvcnkgaW52ZW50aXZlIG1ldGhvZHMsIHB1YmxpYyBzb2Npb2xvZ3ksIGFuZCBpbmNsdXNpdmUgZGV2ZWxvcG1lbnQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIkp1d2VlayBBZG9scGhlIChVWC9VSSBkZXNpZ24pICIpXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBhdHRyczogeyB0YXJnZXQ6ICJfYmxhbmsiLCBocmVmOiAiaHR0cHM6Ly93d3cuanV3ZWVrLm9ubGluZS8iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoImp1d2Vlay5vbmxpbmUiKV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiaDQiLCBbX3ZtLl92KCJTZWFuIENhdGFuZ3VpIChXZWIgRGV2ZWxvcG1lbnQpIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IHRhcmdldDogIl9ibGFuayIsIGhyZWY6ICJodHRwczovL2NhdGFuZ3VpLmNvbSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoImNhdGFuZ3VpLmNvbSIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJociIpLAogICAgICBfYygiaDEiLCBbX3ZtLl92KCJTeXN0ZW0gUmVxdWlyZW1lbnRzICYgSGVscCIpXSksCiAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkNhbWVyYSBQZXJtaXNzaW9ucyIpXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiT24gQ2hyb21lKERlc2t0b3ApIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHlvdSd2ZSBhbHJlYWR5IGJsb2NrZWQgdGhlIGNhbWVyYSBvciBtaWNyb3Bob25lIHBlcm1pc3Npb25zIHlvdSBuZWVkIHRvIGVuYWJsZSB0aGVtIGFnYWluIHZpYSBzZXR0aW5nczoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkF0IHRoZSB0b3AgcmlnaHQsIGNsaWNrIHRocmVlIHZlcnRpY2FsIGRvdHMsIHRoZW4gc2V0dGluZ3Mob3IgZmlsZSBtZW51LCBDaHJvbWUgLT4gcHJlZmVyZW5jZXMpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlVuZGVyIFByaXZhY3kgYW5kIHNlY3VyaXR5LCBjbGljayBTaXRlIHNldHRpbmdzIildKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJDbGljayBDYW1lcmEgYW5kIHRoZW4gTWljcm9waG9uZTog4oCcQXNrIGJlZm9yZSBhY2Nlc3NpbmfigJ0gY2FuIGJlIG9uIG9yIG9mZiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJSZXZpZXcgeW91ciBibG9ja2VkIGFuZCBhbGxvd2VkIHNpdGVzIildKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICdUbyBhbGxvdyBhIHNpdGUgdGhhdCB5b3UgYWxyZWFkeSBibG9ja2VkOiBVbmRlciBCbG9jayBzZWxlY3QgdGhlIHNpdGVcJ3MgbmFtZSB0byBleHBhbmQgdGhlIFBlcm1pc3Npb25zIGFuZCBjaGFuZ2UgdGhlIGNhbWVyYSBhbmQvb3IgbWljcm9waG9uZSBwZXJtaXNzaW9uIHRvICJBbGxvdyInCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiT24gU2FmYXJpKERlc2t0b3ApIildKSwKICAgICAgX2MoIm9sIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk9wZW4gU2FmYXJpIFByZWZlcmVuY2VzIildKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJOYXZpZ2F0ZSB0byBXZWJzaXRlcyIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiR28gdG8gQ2FtZXJhIGFuZCBNaWNyb3Bob25lIHRhYnMiKV0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNoYW5nZSBhY2Nlc3MgdG8gQWxsb3ciKV0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlJlc3RhcnQgU2FmYXJpIildKQogICAgICBdKSwKICAgICAgX2MoImhyIiksCiAgICAgIF9jKCJoMSIsIFtfdm0uX3YoIlByaXZhY3kgUG9saWN5IGZvciBEb3ZldGFpbCBMYWJzIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkF0IEVtb2ppZnksIGFjY2Vzc2libGUgZnJvbSBlbW9qaWZ5LmluZm8sIG9uZSBvZiBvdXIgbWFpbiBwcmlvcml0aWVzIGlzIHRoZSBwcml2YWN5IG9mIG91ciB2aXNpdG9ycy4gVGhpcyBQcml2YWN5IFBvbGljeSBkb2N1bWVudCBjb250YWlucyB0eXBlcyBvZiBpbmZvcm1hdGlvbiB0aGF0IGlzIGNvbGxlY3RlZCBhbmQgcmVjb3JkZWQgYnkgRW1vamlmeSBhbmQgaG93IHdlIHVzZSBpdC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHlvdSBoYXZlIGFkZGl0aW9uYWwgcXVlc3Rpb25zIG9yIHJlcXVpcmUgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBvdXIgUHJpdmFjeSBQb2xpY3ksIGRvIG5vdCBoZXNpdGF0ZSB0byBjb250YWN0IHVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhpcyBQcml2YWN5IFBvbGljeSBhcHBsaWVzIG9ubHkgdG8gb3VyIG9ubGluZSBhY3Rpdml0aWVzIGFuZCBpcyB2YWxpZCBmb3IgdmlzaXRvcnMgdG8gb3VyIHdlYnNpdGUgd2l0aCByZWdhcmRzIHRvIHRoZSBpbmZvcm1hdGlvbiB0aGF0IHRoZXkgc2hhcmVkIGFuZC9vciBjb2xsZWN0IGluIEVtb2ppZnkuIFRoaXMgcG9saWN5IGlzIG5vdCBhcHBsaWNhYmxlIHRvIGFueSBpbmZvcm1hdGlvbiBjb2xsZWN0ZWQgb2ZmbGluZSBvciB2aWEgY2hhbm5lbHMgb3RoZXIgdGhhbiB0aGlzIHdlYnNpdGUuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiaDIiLCBbX3ZtLl92KCJDb25zZW50IildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkJ5IHVzaW5nIG91ciB3ZWJzaXRlLCB5b3UgaGVyZWJ5IGNvbnNlbnQgdG8gb3VyIFByaXZhY3kgUG9saWN5IGFuZCBhZ3JlZSB0byBpdHMgdGVybXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkluZm9ybWF0aW9uIHdlIGNvbGxlY3QiKV0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHBlcnNvbmFsIGluZm9ybWF0aW9uIHRoYXQgeW91IGFyZSBhc2tlZCB0byBwcm92aWRlLCBhbmQgdGhlIHJlYXNvbnMgd2h5IHlvdSBhcmUgYXNrZWQgdG8gcHJvdmlkZSBpdCwgd2lsbCBiZSBtYWRlIGNsZWFyIHRvIHlvdSBhdCB0aGUgcG9pbnQgd2UgYXNrIHlvdSB0byBwcm92aWRlIHlvdXIgcGVyc29uYWwgaW5mb3JtYXRpb24uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiIHlvdSBtYXkgY2hvb3NlIHRvIHByb3ZpZGUuIildKSwKICAgICAgX2MoImgyIiwgW192bS5fdigiSG93IHdlIHVzZSB5b3VyIGluZm9ybWF0aW9uIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldlIHVzZSB0aGUgaW5mb3JtYXRpb24gd2UgY29sbGVjdCBpbiB2YXJpb3VzIHdheXMsIGluY2x1ZGluZyB0bzoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlByb3ZpZGUsIG9wZXJhdGUsIGFuZCBtYWludGFpbiBvdXIgd2Vic2l0ZSIpXSksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiSW1wcm92ZSwgcGVyc29uYWxpemUsIGFuZCBleHBhbmQgb3VyIHdlYnNpdGUiKV0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlVuZGVyc3RhbmQgYW5kIGFuYWx5emUgaG93IHlvdSB1c2Ugb3VyIHdlYnNpdGUiKV0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRGV2ZWxvcCBuZXcgcHJvZHVjdHMsIHNlcnZpY2VzLCBmZWF0dXJlcywgYW5kIGZ1bmN0aW9uYWxpdHkiKQogICAgICAgIF0pLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNvbW11bmljYXRlIHdpdGggeW91LCBlaXRoZXIgZGlyZWN0bHkgb3IgdGhyb3VnaCBvbmUgb2Ygb3VyIHBhcnRuZXJzLCBpbmNsdWRpbmcgZm9yIGN1c3RvbWVyIHNlcnZpY2UsIHRvIHByb3ZpZGUgeW91IHdpdGggdXBkYXRlcyBhbmQgb3RoZXIgaW5mb3JtYXRpb24gcmVsYXRpbmcgdG8gdGhlIHdlYnNpdGUsIGFuZCBmb3IgbWFya2V0aW5nIGFuZCBwcm9tb3Rpb25hbCBwdXJwb3NlcyIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJTZW5kIHlvdSBlbWFpbHMiKV0pLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkZpbmQgYW5kIHByZXZlbnQgZnJhdWQiKV0pCiAgICAgIF0pLAogICAgICBfYygiaDIiLCBbX3ZtLl92KCJMb2cgRmlsZXMiKV0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRW1vamlmeSB3aWxsIG9ubHkgY29sbGVjdCB0aGUgYmFzZSBsZXZlbCBvZiBkYXRhIHRvIGtub3cgaG93IG1hbnkgdXNlcnMgaGF2ZSBlbmdhZ2VkIG91ciBzaXRlIC0gdXNpbmcgYSBzdGFuZGFyZCBwcm9jZWR1cmUgb2YgdXNpbmcgbG9nIGZpbGVzIHZpYSBHb29nbGUgQW5hbHl0aWNzLiBUaGVzZSBmaWxlcyBsb2cgdmlzaXRvcnMgd2hlbiB0aGV5IHZpc2l0IHdlYnNpdGVzLiBUaGVzZSBhcmUgbm90IGxpbmtlZCB0byBhbnkgaW5mb3JtYXRpb24gdGhhdCBpcyBwZXJzb25hbGx5IGlkZW50aWZpYWJsZS4gVGhlIHB1cnBvc2Ugb2YgdGhlIGluZm9ybWF0aW9uIGlzIGZvciBhbmFseXppbmcgdHJlbmRzLCBhZG1pbmlzdGVyaW5nIHRoZSBzaXRlLCB0cmFja2luZyB1c2VycycgbW92ZW1lbnQgb24gdGhlIHdlYnNpdGUsIGFuZCBnYXRoZXJpbmcgZGVtb2dyYXBoaWMgaW5mb3JtYXRpb24uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIlRoaXJkIFBhcnR5IFByaXZhY3kgUG9saWNpZXMiKV0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRW1vamlmeSdzIFByaXZhY3kgUG9saWN5IGRvZXMgbm90IGFwcGx5IHRvIG90aGVyIGFkdmVydGlzZXJzIG9yIHdlYnNpdGVzLiBUaHVzLCB3ZSBhcmUgYWR2aXNpbmcgeW91IHRvIGNvbnN1bHQgdGhlIHJlc3BlY3RpdmUgUHJpdmFjeSBQb2xpY2llcyBvZiB0aGVzZSB0aGlyZC1wYXJ0eSBhZCBzZXJ2ZXJzIGZvciBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uLiBJdCBtYXkgaW5jbHVkZSB0aGVpciBwcmFjdGljZXMgYW5kIGluc3RydWN0aW9ucyBhYm91dCBob3cgdG8gb3B0LW91dCBvZiBjZXJ0YWluIG9wdGlvbnMuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91IGNhbiBjaG9vc2UgdG8gZGlzYWJsZSBjb29raWVzIHRocm91Z2ggeW91ciBpbmRpdmlkdWFsIGJyb3dzZXIgb3B0aW9ucy4gVG8ga25vdyBtb3JlIGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IGNvb2tpZSBtYW5hZ2VtZW50IHdpdGggc3BlY2lmaWMgd2ViIGJyb3dzZXJzLCBpdCBjYW4gYmUgZm91bmQgYXQgdGhlIGJyb3dzZXJzJyByZXNwZWN0aXZlIHdlYnNpdGVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiaDIiLCBbCiAgICAgICAgX3ZtLl92KCJDQ1BBIFByaXZhY3kgUmlnaHRzIChEbyBOb3QgU2VsbCBNeSBQZXJzb25hbCBJbmZvcm1hdGlvbikiKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlVuZGVyIHRoZSBDQ1BBLCBhbW9uZyBvdGhlciByaWdodHMsIENhbGlmb3JuaWEgY29uc3VtZXJzIGhhdmUgdGhlIHJpZ2h0IHRvOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUmVxdWVzdCB0aGF0IGEgYnVzaW5lc3MgdGhhdCBjb2xsZWN0cyBhIGNvbnN1bWVyJ3MgcGVyc29uYWwgZGF0YSBkaXNjbG9zZSB0aGUgY2F0ZWdvcmllcyBhbmQgc3BlY2lmaWMgcGllY2VzIG9mIHBlcnNvbmFsIGRhdGEgdGhhdCBhIGJ1c2luZXNzIGhhcyBjb2xsZWN0ZWQgYWJvdXQgY29uc3VtZXJzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUmVxdWVzdCB0aGF0IGEgYnVzaW5lc3MgZGVsZXRlIGFueSBwZXJzb25hbCBkYXRhIGFib3V0IHRoZSBjb25zdW1lciB0aGF0IGEgYnVzaW5lc3MgaGFzIGNvbGxlY3RlZC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlJlcXVlc3QgdGhhdCBhIGJ1c2luZXNzIHRoYXQgc2VsbHMgYSBjb25zdW1lcidzIHBlcnNvbmFsIGRhdGEsIG5vdCBzZWxsIHRoZSBjb25zdW1lcidzIHBlcnNvbmFsIGRhdGEuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJZiB5b3UgbWFrZSBhIHJlcXVlc3QsIHdlIGhhdmUgb25lIG1vbnRoIHRvIHJlc3BvbmQgdG8geW91LiBJZiB5b3Ugd291bGQgbGlrZSB0byBleGVyY2lzZSBhbnkgb2YgdGhlc2UgcmlnaHRzLCBwbGVhc2UgY29udGFjdCB1cy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoImgyIiwgW192bS5fdigiR0RQUiBEYXRhIFByb3RlY3Rpb24gUmlnaHRzIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIldlIHdvdWxkIGxpa2UgdG8gbWFrZSBzdXJlIHlvdSBhcmUgZnVsbHkgYXdhcmUgb2YgYWxsIG9mIHlvdXIgZGF0YSBwcm90ZWN0aW9uIHJpZ2h0cy4gRXZlcnkgdXNlciBpcyBlbnRpdGxlZCB0byB0aGUgZm9sbG93aW5nOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHJpZ2h0IHRvIGFjY2VzcyDigJMgWW91IGhhdmUgdGhlIHJpZ2h0IHRvIHJlcXVlc3QgY29waWVzIG9mIHlvdXIgcGVyc29uYWwgZGF0YS4gV2UgbWF5IGNoYXJnZSB5b3UgYSBzbWFsbCBmZWUgZm9yIHRoaXMgc2VydmljZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSByaWdodCB0byByZWN0aWZpY2F0aW9uIOKAkyBZb3UgaGF2ZSB0aGUgcmlnaHQgdG8gcmVxdWVzdCB0aGF0IHdlIGNvcnJlY3QgYW55IGluZm9ybWF0aW9uIHlvdSBiZWxpZXZlIGlzIGluYWNjdXJhdGUuIFlvdSBhbHNvIGhhdmUgdGhlIHJpZ2h0IHRvIHJlcXVlc3QgdGhhdCB3ZSBjb21wbGV0ZSB0aGUgaW5mb3JtYXRpb24geW91IGJlbGlldmUgaXMgaW5jb21wbGV0ZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRoZSByaWdodCB0byBlcmFzdXJlIOKAkyBZb3UgaGF2ZSB0aGUgcmlnaHQgdG8gcmVxdWVzdCB0aGF0IHdlIGVyYXNlIHlvdXIgcGVyc29uYWwgZGF0YSwgdW5kZXIgY2VydGFpbiBjb25kaXRpb25zLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHJpZ2h0IHRvIHJlc3RyaWN0IHByb2Nlc3Npbmcg4oCTIFlvdSBoYXZlIHRoZSByaWdodCB0byByZXF1ZXN0IHRoYXQgd2UgcmVzdHJpY3QgdGhlIHByb2Nlc3Npbmcgb2YgeW91ciBwZXJzb25hbCBkYXRhLCB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgcmlnaHQgdG8gb2JqZWN0IHRvIHByb2Nlc3Npbmcg4oCTIFlvdSBoYXZlIHRoZSByaWdodCB0byBvYmplY3QgdG8gb3VyIHByb2Nlc3Npbmcgb2YgeW91ciBwZXJzb25hbCBkYXRhLCB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgcmlnaHQgdG8gZGF0YSBwb3J0YWJpbGl0eSDigJMgWW91IGhhdmUgdGhlIHJpZ2h0IHRvIHJlcXVlc3QgdGhhdCB3ZSB0cmFuc2ZlciB0aGUgZGF0YSB0aGF0IHdlIGhhdmUgY29sbGVjdGVkIHRvIGFub3RoZXIgb3JnYW5pemF0aW9uLCBvciBkaXJlY3RseSB0byB5b3UsIHVuZGVyIGNlcnRhaW4gY29uZGl0aW9ucy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIklmIHlvdSBtYWtlIGEgcmVxdWVzdCwgd2UgaGF2ZSBvbmUgbW9udGggdG8gcmVzcG9uZCB0byB5b3UuIElmIHlvdSB3b3VsZCBsaWtlIHRvIGV4ZXJjaXNlIGFueSBvZiB0aGVzZSByaWdodHMsIHBsZWFzZSBjb250YWN0IHVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiaDIiLCBbX3ZtLl92KCJDaGlsZHJlbidzIEluZm9ybWF0aW9uIildKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFub3RoZXIgcGFydCBvZiBvdXIgcHJpb3JpdHkgaXMgYWRkaW5nIHByb3RlY3Rpb24gZm9yIGNoaWxkcmVuIHdoaWxlIHVzaW5nIHRoZSBpbnRlcm5ldC4gV2UgZW5jb3VyYWdlIHBhcmVudHMgYW5kIGd1YXJkaWFucyB0byBvYnNlcnZlLCBwYXJ0aWNpcGF0ZSBpbiwgYW5kL29yIG1vbml0b3IgYW5kIGd1aWRlIHRoZWlyIG9ubGluZSBhY3Rpdml0eS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkVtb2ppZnkgZG9lcyBub3Qga25vd2luZ2x5IGNvbGxlY3QgYW55IFBlcnNvbmFsIElkZW50aWZpYWJsZSBJbmZvcm1hdGlvbiBmcm9tIGNoaWxkcmVuIHVuZGVyIHRoZSBhZ2Ugb2YgMTMuIElmIHlvdSB0aGluayB0aGF0IHlvdXIgY2hpbGQgcHJvdmlkZWQgdGhpcyBraW5kIG9mIGluZm9ybWF0aW9uIG9uIG91ciB3ZWJzaXRlLCB3ZSBzdHJvbmdseSBlbmNvdXJhZ2UgeW91IHRvIGNvbnRhY3QgdXMgaW1tZWRpYXRlbHkgYW5kIHdlIHdpbGwgZG8gb3VyIGJlc3QgZWZmb3J0cyB0byBwcm9tcHRseSByZW1vdmUgc3VjaCBpbmZvcm1hdGlvbiBmcm9tIG91ciByZWNvcmRzLiIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}